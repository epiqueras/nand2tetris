'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = advance;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var currentChar = Buffer.from([0x20]); /* eslint-disable no-useless-escape */

var isLiteral = false;

function nextChar(input) {
  return _fs2.default.readSync(input, currentChar, 0, 1);
}

function nextToken(input, lexicalElements) {
  var token = '';

  // Skip over whitespace
  while (currentChar.toString() !== _os2.default.EOL && /\s/.test(currentChar.toString()) && nextChar(input)) {
    token = currentChar.toString();
  } // Stop and return symbols
  if ((0, _utils.testRule)(currentChar.toString(), lexicalElements.symbol) || currentChar.toString() === _os2.default.EOL) {
    token = currentChar.toString();
    currentChar.write(' ');
    return token;
  }

  // Different rules for string literals
  if ((0, _utils.isQuote)(currentChar.toString())) {
    isLiteral = currentChar.toString();
    token = '';
    var _bytesRead = nextChar(input);
    while (_bytesRead && currentChar.toString() !== isLiteral) {
      token += currentChar.toString();
      _bytesRead = nextChar(input);
    }
    currentChar.write(' ');
    return token;
  }

  // Concatenate other characters
  var bytesRead = nextChar(input);
  while (bytesRead && !/\s/.test(currentChar.toString()) && !(0, _utils.testRule)(currentChar.toString(), lexicalElements.symbol)) {
    token += currentChar.toString();
    bytesRead = nextChar(input);
  }

  return token.trim();
}

// Assigns token to a lexical element
function categorize(token, lexicalElements) {
  if (isLiteral) {
    isLiteral = false;
    if (lexicalElements.stringConstant) {
      if ((0, _utils.testRule)(token, lexicalElements.stringConstant)) return 'stringConstant';
      throw new Error('Invalid string constant.');
    } else return 'stringConstant';
  }

  if (token === _os2.default.EOL) return 'eol';
  var matched = Object.keys(lexicalElements).find(function (element) {
    return (0, _utils.testRule)(token, lexicalElements[element]);
  });
  if (matched) return matched;
  throw new Error('Invalid token.');
}

// Advances compilation to the next token
function advance(input, lexicalElements) {
  var token = nextToken(input, lexicalElements);
  return token ? { content: token, tag: categorize(token, lexicalElements) } : token;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zeW50YXgtYW5hbHl6ZXIvdG9rZW5pemVyLmpzIl0sIm5hbWVzIjpbImFkdmFuY2UiLCJjdXJyZW50Q2hhciIsIkJ1ZmZlciIsImZyb20iLCJpc0xpdGVyYWwiLCJuZXh0Q2hhciIsImlucHV0IiwicmVhZFN5bmMiLCJuZXh0VG9rZW4iLCJsZXhpY2FsRWxlbWVudHMiLCJ0b2tlbiIsInRvU3RyaW5nIiwiRU9MIiwidGVzdCIsInN5bWJvbCIsIndyaXRlIiwiYnl0ZXNSZWFkIiwidHJpbSIsImNhdGVnb3JpemUiLCJzdHJpbmdDb25zdGFudCIsIkVycm9yIiwibWF0Y2hlZCIsIk9iamVjdCIsImtleXMiLCJmaW5kIiwiZWxlbWVudCIsImNvbnRlbnQiLCJ0YWciXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Fd0JBLE87O0FBbkV4Qjs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQSxJQUFNQyxjQUFjQyxPQUFPQyxJQUFQLENBQVksQ0FBQyxJQUFELENBQVosQ0FBcEIsQyxDQU5BOztBQU9BLElBQUlDLFlBQVksS0FBaEI7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQkMsS0FBbEIsRUFBeUI7QUFDdkIsU0FBTyxhQUFHQyxRQUFILENBQVlELEtBQVosRUFBbUJMLFdBQW5CLEVBQWdDLENBQWhDLEVBQW1DLENBQW5DLENBQVA7QUFDRDs7QUFFRCxTQUFTTyxTQUFULENBQW1CRixLQUFuQixFQUEwQkcsZUFBMUIsRUFBMkM7QUFDekMsTUFBSUMsUUFBUSxFQUFaOztBQUVBO0FBQ0EsU0FBT1QsWUFBWVUsUUFBWixPQUEyQixhQUFHQyxHQUE5QixJQUFxQyxLQUFLQyxJQUFMLENBQVVaLFlBQVlVLFFBQVosRUFBVixDQUFyQyxJQUEwRU4sU0FBU0MsS0FBVCxDQUFqRjtBQUFrR0ksWUFBUVQsWUFBWVUsUUFBWixFQUFSO0FBQWxHLEdBSnlDLENBTXpDO0FBQ0EsTUFBSSxxQkFBU1YsWUFBWVUsUUFBWixFQUFULEVBQWlDRixnQkFBZ0JLLE1BQWpELEtBQ0NiLFlBQVlVLFFBQVosT0FBMkIsYUFBR0MsR0FEbkMsRUFDd0M7QUFDdENGLFlBQVFULFlBQVlVLFFBQVosRUFBUjtBQUNBVixnQkFBWWMsS0FBWixDQUFrQixHQUFsQjtBQUNBLFdBQU9MLEtBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUksb0JBQVFULFlBQVlVLFFBQVosRUFBUixDQUFKLEVBQXFDO0FBQ25DUCxnQkFBWUgsWUFBWVUsUUFBWixFQUFaO0FBQ0FELFlBQVEsRUFBUjtBQUNBLFFBQUlNLGFBQVlYLFNBQVNDLEtBQVQsQ0FBaEI7QUFDQSxXQUFPVSxjQUFhZixZQUFZVSxRQUFaLE9BQTJCUCxTQUEvQyxFQUEwRDtBQUN4RE0sZUFBU1QsWUFBWVUsUUFBWixFQUFUO0FBQ0FLLG1CQUFZWCxTQUFTQyxLQUFULENBQVo7QUFDRDtBQUNETCxnQkFBWWMsS0FBWixDQUFrQixHQUFsQjtBQUNBLFdBQU9MLEtBQVA7QUFDRDs7QUFFRDtBQUNBLE1BQUlNLFlBQVlYLFNBQVNDLEtBQVQsQ0FBaEI7QUFDQSxTQUFPVSxhQUFhLENBQUMsS0FBS0gsSUFBTCxDQUFVWixZQUFZVSxRQUFaLEVBQVYsQ0FBZCxJQUFtRCxDQUFDLHFCQUFTVixZQUFZVSxRQUFaLEVBQVQsRUFBaUNGLGdCQUFnQkssTUFBakQsQ0FBM0QsRUFBcUg7QUFDbkhKLGFBQVNULFlBQVlVLFFBQVosRUFBVDtBQUNBSyxnQkFBWVgsU0FBU0MsS0FBVCxDQUFaO0FBQ0Q7O0FBRUQsU0FBT0ksTUFBTU8sSUFBTixFQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFTQyxVQUFULENBQW9CUixLQUFwQixFQUEyQkQsZUFBM0IsRUFBNEM7QUFDMUMsTUFBSUwsU0FBSixFQUFlO0FBQ2JBLGdCQUFZLEtBQVo7QUFDQSxRQUFJSyxnQkFBZ0JVLGNBQXBCLEVBQW9DO0FBQ2xDLFVBQUkscUJBQVNULEtBQVQsRUFBZ0JELGdCQUFnQlUsY0FBaEMsQ0FBSixFQUFxRCxPQUFPLGdCQUFQO0FBQ3JELFlBQU0sSUFBSUMsS0FBSixDQUFVLDBCQUFWLENBQU47QUFDRCxLQUhELE1BR08sT0FBTyxnQkFBUDtBQUNSOztBQUVELE1BQUlWLFVBQVUsYUFBR0UsR0FBakIsRUFBc0IsT0FBTyxLQUFQO0FBQ3RCLE1BQU1TLFVBQVVDLE9BQU9DLElBQVAsQ0FBWWQsZUFBWixFQUNiZSxJQURhLENBQ1I7QUFBQSxXQUFXLHFCQUFTZCxLQUFULEVBQWdCRCxnQkFBZ0JnQixPQUFoQixDQUFoQixDQUFYO0FBQUEsR0FEUSxDQUFoQjtBQUVBLE1BQUlKLE9BQUosRUFBYSxPQUFPQSxPQUFQO0FBQ2IsUUFBTSxJQUFJRCxLQUFKLENBQVUsZ0JBQVYsQ0FBTjtBQUNEOztBQUVEO0FBQ2UsU0FBU3BCLE9BQVQsQ0FBaUJNLEtBQWpCLEVBQXdCRyxlQUF4QixFQUF5QztBQUN0RCxNQUFNQyxRQUFRRixVQUFVRixLQUFWLEVBQWlCRyxlQUFqQixDQUFkO0FBQ0EsU0FBT0MsUUFBUSxFQUFFZ0IsU0FBU2hCLEtBQVgsRUFBa0JpQixLQUFLVCxXQUFXUixLQUFYLEVBQWtCRCxlQUFsQixDQUF2QixFQUFSLEdBQXNFQyxLQUE3RTtBQUNEIiwiZmlsZSI6InRva2VuaXplci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtZXNjYXBlICovXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcblxuaW1wb3J0IHsgdGVzdFJ1bGUsIGlzUXVvdGUgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgY3VycmVudENoYXIgPSBCdWZmZXIuZnJvbShbMHgyMF0pO1xubGV0IGlzTGl0ZXJhbCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBuZXh0Q2hhcihpbnB1dCkge1xuICByZXR1cm4gZnMucmVhZFN5bmMoaW5wdXQsIGN1cnJlbnRDaGFyLCAwLCAxKTtcbn1cblxuZnVuY3Rpb24gbmV4dFRva2VuKGlucHV0LCBsZXhpY2FsRWxlbWVudHMpIHtcbiAgbGV0IHRva2VuID0gJyc7XG5cbiAgLy8gU2tpcCBvdmVyIHdoaXRlc3BhY2VcbiAgd2hpbGUgKGN1cnJlbnRDaGFyLnRvU3RyaW5nKCkgIT09IG9zLkVPTCAmJiAvXFxzLy50ZXN0KGN1cnJlbnRDaGFyLnRvU3RyaW5nKCkpICYmIG5leHRDaGFyKGlucHV0KSkgdG9rZW4gPSBjdXJyZW50Q2hhci50b1N0cmluZygpO1xuXG4gIC8vIFN0b3AgYW5kIHJldHVybiBzeW1ib2xzXG4gIGlmICh0ZXN0UnVsZShjdXJyZW50Q2hhci50b1N0cmluZygpLCBsZXhpY2FsRWxlbWVudHMuc3ltYm9sKVxuICAgIHx8IGN1cnJlbnRDaGFyLnRvU3RyaW5nKCkgPT09IG9zLkVPTCkge1xuICAgIHRva2VuID0gY3VycmVudENoYXIudG9TdHJpbmcoKTtcbiAgICBjdXJyZW50Q2hhci53cml0ZSgnICcpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIC8vIERpZmZlcmVudCBydWxlcyBmb3Igc3RyaW5nIGxpdGVyYWxzXG4gIGlmIChpc1F1b3RlKGN1cnJlbnRDaGFyLnRvU3RyaW5nKCkpKSB7XG4gICAgaXNMaXRlcmFsID0gY3VycmVudENoYXIudG9TdHJpbmcoKTtcbiAgICB0b2tlbiA9ICcnO1xuICAgIGxldCBieXRlc1JlYWQgPSBuZXh0Q2hhcihpbnB1dCk7XG4gICAgd2hpbGUgKGJ5dGVzUmVhZCAmJiBjdXJyZW50Q2hhci50b1N0cmluZygpICE9PSBpc0xpdGVyYWwpIHtcbiAgICAgIHRva2VuICs9IGN1cnJlbnRDaGFyLnRvU3RyaW5nKCk7XG4gICAgICBieXRlc1JlYWQgPSBuZXh0Q2hhcihpbnB1dCk7XG4gICAgfVxuICAgIGN1cnJlbnRDaGFyLndyaXRlKCcgJyk7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9XG5cbiAgLy8gQ29uY2F0ZW5hdGUgb3RoZXIgY2hhcmFjdGVyc1xuICBsZXQgYnl0ZXNSZWFkID0gbmV4dENoYXIoaW5wdXQpO1xuICB3aGlsZSAoYnl0ZXNSZWFkICYmICEvXFxzLy50ZXN0KGN1cnJlbnRDaGFyLnRvU3RyaW5nKCkpICYmICF0ZXN0UnVsZShjdXJyZW50Q2hhci50b1N0cmluZygpLCBsZXhpY2FsRWxlbWVudHMuc3ltYm9sKSkge1xuICAgIHRva2VuICs9IGN1cnJlbnRDaGFyLnRvU3RyaW5nKCk7XG4gICAgYnl0ZXNSZWFkID0gbmV4dENoYXIoaW5wdXQpO1xuICB9XG5cbiAgcmV0dXJuIHRva2VuLnRyaW0oKTtcbn1cblxuLy8gQXNzaWducyB0b2tlbiB0byBhIGxleGljYWwgZWxlbWVudFxuZnVuY3Rpb24gY2F0ZWdvcml6ZSh0b2tlbiwgbGV4aWNhbEVsZW1lbnRzKSB7XG4gIGlmIChpc0xpdGVyYWwpIHtcbiAgICBpc0xpdGVyYWwgPSBmYWxzZTtcbiAgICBpZiAobGV4aWNhbEVsZW1lbnRzLnN0cmluZ0NvbnN0YW50KSB7XG4gICAgICBpZiAodGVzdFJ1bGUodG9rZW4sIGxleGljYWxFbGVtZW50cy5zdHJpbmdDb25zdGFudCkpIHJldHVybiAnc3RyaW5nQ29uc3RhbnQnO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9IGVsc2UgcmV0dXJuICdzdHJpbmdDb25zdGFudCc7XG4gIH1cblxuICBpZiAodG9rZW4gPT09IG9zLkVPTCkgcmV0dXJuICdlb2wnO1xuICBjb25zdCBtYXRjaGVkID0gT2JqZWN0LmtleXMobGV4aWNhbEVsZW1lbnRzKVxuICAgIC5maW5kKGVsZW1lbnQgPT4gdGVzdFJ1bGUodG9rZW4sIGxleGljYWxFbGVtZW50c1tlbGVtZW50XSkpO1xuICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbi4nKTtcbn1cblxuLy8gQWR2YW5jZXMgY29tcGlsYXRpb24gdG8gdGhlIG5leHQgdG9rZW5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkdmFuY2UoaW5wdXQsIGxleGljYWxFbGVtZW50cykge1xuICBjb25zdCB0b2tlbiA9IG5leHRUb2tlbihpbnB1dCwgbGV4aWNhbEVsZW1lbnRzKTtcbiAgcmV0dXJuIHRva2VuID8geyBjb250ZW50OiB0b2tlbiwgdGFnOiBjYXRlZ29yaXplKHRva2VuLCBsZXhpY2FsRWxlbWVudHMpIH0gOiB0b2tlbjtcbn1cbiJdfQ==